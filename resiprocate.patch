diff --git a/CMakeLists.txt b/CMakeLists.txt
old mode 100644
new mode 100755
index 4e55b5c3e..31c69a4a9
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
+cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/cmake_modules")
 
 # For Visual Studio Solution Generation
@@ -48,8 +48,8 @@ add_definitions(-DHAVE_VERSION_H)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/version.h.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/version.h)
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/version.h
-        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/resip/)
+#install(FILES ${CMAKE_CURRENT_BINARY_DIR}/version.h
+#        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/resip/)
 
 option(ENABLE_LOG_REPOSITORY_DETAILS "Log repository revision and branch" TRUE)
 if(ENABLE_LOG_REPOSITORY_DETAILS)
@@ -149,10 +149,10 @@ if(WIN32)
    set(REGENERATE_MEDIA_SAMPLES_DEFAULT OFF)
    set(BUILD_DSO_PLUGINS_DEFAULT OFF)
 else()
-   set(WITH_C_ARES_DEFAULT ON)  # Needed for TFM to build correctly on linux
-   set(BUILD_QPID_PROTON_DEFAULT ON)
+   set(WITH_C_ARES_DEFAULT OFF)  # Needed for TFM to build correctly on linux
+   set(BUILD_QPID_PROTON_DEFAULT OFF)
    set(RESIP_ASSERT_SYSLOG_DEFAULT ON)
-   set(REGENERATE_MEDIA_SAMPLES_DEFAULT ON)
+   set(REGENERATE_MEDIA_SAMPLES_DEFAULT OFF)
    set(BUILD_DSO_PLUGINS_DEFAULT ON)
 endif()
 option(WITH_C_ARES "Link against libc-ares (rather than rutil/dns/ares)" ${WITH_C_ARES_DEFAULT})
@@ -201,7 +201,7 @@ if(WIN32)
    set(USE_CONTRIB_DEFAULT ON)
    set(USE_NUGET_DEFAULT ON)
 else()
-   set(BUILD_SHARED_LIBS_DEFAULT ON)
+   set(BUILD_SHARED_LIBS_DEFAULT OFF)
    set(USE_CONTRIB_DEFAULT OFF)
    set(USE_NUGET_DEFAULT OFF)
 endif()
diff --git a/resip/dum/CMakeLists.txt b/resip/dum/CMakeLists.txt
old mode 100644
new mode 100755
index c4d5e3ff9..19ef22d2a
--- a/resip/dum/CMakeLists.txt
+++ b/resip/dum/CMakeLists.txt
@@ -204,7 +204,7 @@ version_libname(dum)
 set_target_properties(dum PROPERTIES FOLDER dum)
 
 install(TARGETS dum DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/dum ${INCLUDES})
+#install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/dum ${INCLUDES})
 
 if(BUILD_TESTING)
     add_subdirectory(test)
diff --git a/resip/dum/DialogSetId.cxx b/resip/dum/DialogSetId.cxx
old mode 100644
new mode 100755
index 266a2bf95..33e067971
--- a/resip/dum/DialogSetId.cxx
+++ b/resip/dum/DialogSetId.cxx
@@ -31,7 +31,7 @@ DialogSetId::DialogSetId(const SipMessage& msg) :
          }
          else
          {
-            //DebugLog ( <<  "********** Generated Local Tag *********** " );            
+            DebugLog ( <<  "********** Generated Local Tag *********** " );
             mTag = Helper::computeTag(Helper::tagSize);
          }
       }
diff --git a/resip/dum/DialogUsageManager.cxx b/resip/dum/DialogUsageManager.cxx
old mode 100644
new mode 100755
index e905fc28e..54df1e50b
--- a/resip/dum/DialogUsageManager.cxx
+++ b/resip/dum/DialogUsageManager.cxx
@@ -1676,10 +1676,45 @@ DialogUsageManager::incomingProcess(std::unique_ptr<Message> msg)
             }
             if (sipMsg->header(h_From).exists(p_tag))
             {
-               if (mergeRequest(*sipMsg) )
+               // if (mergeRequest(*sipMsg) )
+               // {
+               //    InfoLog (<< "Merged request: " << *sipMsg);
+               //    return;
+               // }
+            }
+            if (sipMsg->header(h_RequestLine).method() == ACK
+               && ((!sipMsg->header(h_To).exists(p_tag))
+                     || (sipMsg->header(h_To).exists(p_tag) && sipMsg->header(h_To).param(p_tag) == "1533684873")
+                  )
+               )
+            {
+               auto it = mDialogSetMap.begin();
+               for (; it != mDialogSetMap.end(); it++)
                {
-                  InfoLog (<< "Merged request: " << *sipMsg);
-                  return;
+                  if (it->first.getCallId() == sipMsg->header(h_CallId).value())
+                  {
+                     break;
+                  }
+               }
+               if (it != mDialogSetMap.end())
+               {
+                  sipMsg->header(h_To).param(p_tag) = it->first.getLocalTag();
+               }
+            }
+            if (sipMsg->header(h_RequestLine).method() == INFO
+               && !sipMsg->header(h_To).exists(p_tag))
+            {
+               auto it = mDialogSetMap.begin();
+               for (; it != mDialogSetMap.end(); it++)
+               {
+                  if (it->first.getCallId() == sipMsg->header(h_CallId).value())
+                  {
+                     break;
+                  }
+               }
+               if (it != mDialogSetMap.end())
+               {
+                  sipMsg->header(h_To).param(p_tag) = it->first.getLocalTag();
                }
             }
             processRequest(*sipMsg);
diff --git a/resip/dum/test/basicMessage.cxx b/resip/dum/test/basicMessage.cxx
old mode 100644
new mode 100755
diff --git a/resip/stack/CMakeLists.txt b/resip/stack/CMakeLists.txt
old mode 100644
new mode 100755
index d7c2f4c46..b0eeabedb
--- a/resip/stack/CMakeLists.txt
+++ b/resip/stack/CMakeLists.txt
@@ -410,7 +410,7 @@ version_libname(resip)
 set_target_properties(resip PROPERTIES FOLDER resip)
 
 install(TARGETS resip DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/stack ${INCLUDES})
+#install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/stack ${INCLUDES})
 
 if(BUILD_TESTING)
     add_subdirectory(test)
diff --git a/resip/stack/SdpContents.cxx b/resip/stack/SdpContents.cxx
old mode 100644
new mode 100755
index 37f75d8a0..685739970
--- a/resip/stack/SdpContents.cxx
+++ b/resip/stack/SdpContents.cxx
@@ -1526,7 +1526,8 @@ SdpContents::Session::Medium::Medium()
    : mSession(0),
      mPort(0),
      mMulticast(1),
-     mRtpMapDone(false)
+     mRtpMapDone(false),
+     mSSRC(0)
 {}
 
 SdpContents::Session::Medium::Medium(const Medium& rhs)
@@ -1544,7 +1545,8 @@ SdpContents::Session::Medium::Medium(const Medium& rhs)
      mEncryption(rhs.mEncryption),
      mAttributeHelper(rhs.mAttributeHelper),
      mRtpMapDone(rhs.mRtpMapDone),
-     mRtpMap(rhs.mRtpMap)
+     mRtpMap(rhs.mRtpMap),
+     mSSRC(rhs.mSSRC)
 {
 }
 
@@ -1706,6 +1708,14 @@ SdpContents::Session::Medium::parse(ParseBuffer& pb)
    }
 
    mAttributeHelper.parse(pb);
+
+   if (!pb.eof() && *pb.position() == 'y')
+   {
+      pb.skipChar('y');
+      pb.skipChar(Symbols::EQUALS[0]);
+      mSSRC = pb.uInt32();
+      skipEol(pb);
+   }
 }
 
 EncodeStream&
@@ -1788,6 +1798,10 @@ SdpContents::Session::Medium::encode(EncodeStream& s) const
 
    mAttributeHelper.encode(s);
 
+   char y[16] = {0};
+   snprintf(y, sizeof(y), "%010u", mSSRC);
+   s << "y=" << y << Symbols::CRLF;
+
    return s;
 }
 
diff --git a/resip/stack/SdpContents.hxx b/resip/stack/SdpContents.hxx
old mode 100644
new mode 100755
index acf793f5a..3cd219b94
--- a/resip/stack/SdpContents.hxx
+++ b/resip/stack/SdpContents.hxx
@@ -843,6 +843,9 @@ class SdpContents : public Contents
                   const Direction& getDirection() const;
                   const Direction& getDirection(const Direction& sessionDefault) const;
 
+                  uint32_t ssrc() const {return mSSRC;}
+                  uint32_t& ssrc() { return mSSRC;}
+
                private:
                   void setSession(Session* session);
                   Session* mSession;
@@ -864,6 +867,8 @@ class SdpContents : public Contents
                   typedef HashMap<int, Codec> RtpMap;
                   RtpMap mRtpMap;
 
+                  uint32_t mSSRC;
+
                   friend class Session;
             };
 
diff --git a/rutil/CMakeLists.txt b/rutil/CMakeLists.txt
old mode 100644
new mode 100755
index 5144cc3de..49b9a89e3
--- a/rutil/CMakeLists.txt
+++ b/rutil/CMakeLists.txt
@@ -260,7 +260,7 @@ set_target_properties(rutil PROPERTIES FOLDER rutil)
 version_libname(rutil)
 
 install(TARGETS rutil DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/rutil ${INCLUDES})
+#install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/rutil ${INCLUDES})
 
 if(NOT WITH_C_ARES)
    add_subdirectory(dns/ares)
diff --git a/rutil/dns/ares/CMakeLists.txt b/rutil/dns/ares/CMakeLists.txt
old mode 100644
new mode 100755
index 021b8cf28..8cb0002c1
--- a/rutil/dns/ares/CMakeLists.txt
+++ b/rutil/dns/ares/CMakeLists.txt
@@ -57,7 +57,7 @@ version_libname(resipares)
 set_target_properties(resipares PROPERTIES FOLDER rutil/ares)
 
 install(TARGETS resipares DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install(FILES ${INCLUDES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rutil/dns/ares)
+#install(FILES ${INCLUDES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rutil/dns/ares)
 
 add_executable(ahost EXCLUDE_FROM_ALL ahost.c)
 add_executable(adig EXCLUDE_FROM_ALL adig.c)
