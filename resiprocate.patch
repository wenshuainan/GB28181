diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4e55b5c3e..cf10fad9a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
+#cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/cmake_modules")
 
 # For Visual Studio Solution Generation
@@ -11,7 +11,7 @@ if(POLICY CMP0077)
 endif(POLICY CMP0077)
 
 # https://cmake.org/cmake/help/latest/variable/PROJECT_VERSION.html
-project(resiprocate VERSION 1.14.0)
+#project(resiprocate VERSION 1.14.0)
 
 # Specifies the pre-release tag, such as alphaN or betaN.
 set(RESIPROCATE_VERSION_PRE_RELEASE "")
@@ -48,10 +48,10 @@ add_definitions(-DHAVE_VERSION_H)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/version.h.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/version.h)
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/version.h
-        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/resip/)
+#install(FILES ${CMAKE_CURRENT_BINARY_DIR}/version.h
+#        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/resip/)
 
-option(ENABLE_LOG_REPOSITORY_DETAILS "Log repository revision and branch" TRUE)
+option(ENABLE_LOG_REPOSITORY_DETAILS "Log repository revision and branch" FALSE)
 if(ENABLE_LOG_REPOSITORY_DETAILS)
    find_package(Git REQUIRED)
    execute_process(
@@ -66,10 +66,10 @@ endif()
 
 # https://cmake.org/cmake/help/latest/module/FindThreads.html
 set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
-find_package(Threads REQUIRED)
-if(NOT Threads_FOUND)
-   exit()
-endif()
+#find_package(Threads REQUIRED)
+#if(NOT Threads_FOUND)
+#   exit()
+#endif()
 if(CMAKE_USE_PTHREADS_INIT)
    add_definitions(-D__REENTRANT)
    add_definitions(-pthread)
@@ -81,8 +81,8 @@ set(RESIP_SIP_MSG_MAX_BYTES 10485760)
 # https://cmake.org/cmake/help/latest/module/TestBigEndian.html
 # see also
 # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_BYTE_ORDER.html
-include (TestBigEndian)
-test_big_endian(RESIP_BIG_ENDIAN)
+#include (TestBigEndian)
+#test_big_endian(RESIP_BIG_ENDIAN)
 
 check_cxx_source_compiles("
 #include <string_view>
@@ -100,14 +100,14 @@ endif()
 # Top-level user-settable variables (with defaults)
 # Those can be queried from the command line using "cmake -LH" and can be
 # specified on the command line, using cmake-gui or ccmake.
-option(WITH_SSL "Link against SSL libraries" TRUE)
-option(USE_POPT "Link against POPT libraries" TRUE)
+option(WITH_SSL "Link against SSL libraries" FALSE)
+option(USE_POPT "Link against POPT libraries" FALSE)
 option(USE_SIGCOMP "Use OpenSigComp" FALSE)
 option(USE_FMT "Link against fmt library" FALSE)
-option(VERSIONED_SONAME "Include Major.Minor version in SONAME" TRUE)
+option(VERSIONED_SONAME "Include Major.Minor version in SONAME" FALSE)
 option(ENABLE_ANDROID "Enable Android build" FALSE)
-option(USE_IPV6 "Enable IPv6" TRUE)
-option(USE_DTLS "Enable DTLS" TRUE)
+option(USE_IPV6 "Enable IPv6" FALSE)
+option(USE_DTLS "Enable DTLS" FALSE)
 option(PEDANTIC_STACK "Enable pedantic behavior (fully parse all messages)" FALSE)
 option(USE_MYSQL "Link against MySQL client libraries" FALSE)
 # some systems may have a newer version of libpq that is not
@@ -117,18 +117,18 @@ option(USE_SOCI_POSTGRESQL "Build recon with SOCI PostgreSQL support" FALSE)
 # time in some environments, e.g. CentOS 8.1
 option(USE_SOCI_MYSQL "Build recon with SOCI MySQL support" FALSE)
 option(USE_POSTGRESQL "Link against PostgreSQL client libraries" FALSE)
-option(USE_MAXMIND_GEOIP "Link against MaxMind GeoIP libraries" TRUE)
+option(USE_MAXMIND_GEOIP "Link against MaxMind GeoIP libraries" FALSE)
 option(RESIP_HAVE_RADCLI "Link against radcli RADIUS client library" FALSE)
 option(USE_NETSNMP "Link against NetSNMP client libraries" FALSE)
-option(BUILD_REPRO "Build repro SIP proxy" TRUE)
-option(BUILD_RETURN "Build reTurn server" TRUE)
-option(BUILD_REFLOW "Build reflow library" TRUE)
-option(BUILD_REND "Build rend" TRUE)
-option(BUILD_TFM "Build TFM, requires Netxx and cppunit" TRUE)
+option(BUILD_REPRO "Build repro SIP proxy" FALSE)
+option(BUILD_RETURN "Build reTurn server" FALSE)
+option(BUILD_REFLOW "Build reflow library" FALSE)
+option(BUILD_REND "Build rend" FALSE)
+option(BUILD_TFM "Build TFM, requires Netxx and cppunit" FALSE)
 option(BUILD_CLICKTOCALL "Build Click to call application" FALSE)
 option(BUILD_ICHAT_GW "Build iChat gateway, requires gloox" FALSE)
 option(BUILD_TELEPATHY_CM "Build Telepathy connection manager" FALSE)
-option(BUILD_RECON "Build reCon Conversation Manager library" TRUE)
+option(BUILD_RECON "Build reCon Conversation Manager library" FALSE)
 option(USE_SRTP1 "Use srtp 1.x instead of current version" FALSE)
 option(BUILD_RECONSERVER "Build reConServer" FALSE)
 option(USE_SIPXTAPI "Link against sipXtapi" FALSE)
@@ -139,7 +139,7 @@ option(USE_LIBWEBRTC "Link against LibWebRTC" FALSE)
 option(RECON_LOCAL_HW_TESTS "Attempt to use local audio hardware in unit tests" FALSE)
 option(BUILD_P2P "Build P2P, links against S2C and SSL, unfinished" FALSE)
 option(BUILD_PYTHON "Build components requiring Python" FALSE)
-option(BUILD_TESTING "Build manual & unit tests" TRUE)
+option(BUILD_TESTING "Build manual & unit tests" FALSE)
 
 # Enable/disable linux based settings appropriately
 if(WIN32)
@@ -149,11 +149,11 @@ if(WIN32)
    set(REGENERATE_MEDIA_SAMPLES_DEFAULT OFF)
    set(BUILD_DSO_PLUGINS_DEFAULT OFF)
 else()
-   set(WITH_C_ARES_DEFAULT ON)  # Needed for TFM to build correctly on linux
-   set(BUILD_QPID_PROTON_DEFAULT ON)
-   set(RESIP_ASSERT_SYSLOG_DEFAULT ON)
-   set(REGENERATE_MEDIA_SAMPLES_DEFAULT ON)
-   set(BUILD_DSO_PLUGINS_DEFAULT ON)
+   set(WITH_C_ARES_DEFAULT OFF)  # Needed for TFM to build correctly on linux
+   set(BUILD_QPID_PROTON_DEFAULT OFF)
+   set(RESIP_ASSERT_SYSLOG_DEFAULT OFF)
+   set(REGENERATE_MEDIA_SAMPLES_DEFAULT OFF)
+   set(BUILD_DSO_PLUGINS_DEFAULT OFF)
 endif()
 option(WITH_C_ARES "Link against libc-ares (rather than rutil/dns/ares)" ${WITH_C_ARES_DEFAULT})
 option(BUILD_QPID_PROTON "Build components requiring qpid-proton (AMQP)" ${BUILD_QPID_PROTON_DEFAULT})
@@ -201,7 +201,7 @@ if(WIN32)
    set(USE_CONTRIB_DEFAULT ON)
    set(USE_NUGET_DEFAULT ON)
 else()
-   set(BUILD_SHARED_LIBS_DEFAULT ON)
+   set(BUILD_SHARED_LIBS_DEFAULT OFF)
    set(USE_CONTRIB_DEFAULT OFF)
    set(USE_NUGET_DEFAULT OFF)
 endif()
@@ -300,9 +300,9 @@ endif()
 ### Dependencies ###
 ####################
 
-if(NOT USE_CONTRIB)
-   find_package(PkgConfig REQUIRED)
-endif()
+#if(NOT USE_CONTRIB)
+#   find_package(PkgConfig REQUIRED)
+#endif()
 
 # ares
 if(WITH_C_ARES)
diff --git a/resip/dum/CMakeLists.txt b/resip/dum/CMakeLists.txt
index c4d5e3ff9..19ef22d2a 100644
--- a/resip/dum/CMakeLists.txt
+++ b/resip/dum/CMakeLists.txt
@@ -204,7 +204,7 @@ version_libname(dum)
 set_target_properties(dum PROPERTIES FOLDER dum)
 
 install(TARGETS dum DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/dum ${INCLUDES})
+#install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/dum ${INCLUDES})
 
 if(BUILD_TESTING)
     add_subdirectory(test)
diff --git a/resip/dum/DialogUsageManager.cxx b/resip/dum/DialogUsageManager.cxx
old mode 100644
new mode 100755
index e905fc28e..6561a34af
--- a/resip/dum/DialogUsageManager.cxx
+++ b/resip/dum/DialogUsageManager.cxx
@@ -1674,6 +1674,39 @@ DialogUsageManager::incomingProcess(std::unique_ptr<Message> msg)
                   return;
                }
             }
+            if (sipMsg->header(h_RequestLine).method() == ACK
+               && ((!sipMsg->header(h_To).exists(p_tag))
+                     || (sipMsg->header(h_To).exists(p_tag) && sipMsg->header(h_To).param(p_tag) == "1533684873")
+                  )
+               )
+            {
+               WarningLog (<< "JUST FOR GB28181TestTool!!! ACK without To tag" << *sipMsg);
+               auto it = mDialogSetMap.begin();
+               for (; it != mDialogSetMap.end(); it++)
+               {
+                  if (it->first.getCallId() == sipMsg->header(h_CallId).value())
+                  {
+                     WarningLog (<< "JUST FOR GB28181TestTool!!! add To tag" << *sipMsg);
+                     sipMsg->header(h_To).param(p_tag) = it->first.getLocalTag();
+                     break;
+                  }
+               }
+            }
+            if (sipMsg->header(h_RequestLine).method() == INFO
+               && !sipMsg->header(h_To).exists(p_tag))
+            {
+               WarningLog (<< "JUST FOR GB28181TestTool!!! INFO without To tag" << *sipMsg);
+               auto it = mDialogSetMap.begin();
+               for (; it != mDialogSetMap.end(); it++)
+               {
+                  if (it->first.getCallId() == sipMsg->header(h_CallId).value())
+                  {
+                     WarningLog (<< "JUST FOR GB28181TestTool!!! add To tag" << *sipMsg);
+                     sipMsg->header(h_To).param(p_tag) = it->first.getLocalTag();
+                     break;
+                  }
+               }
+            }
             if (sipMsg->header(h_From).exists(p_tag))
             {
                if (mergeRequest(*sipMsg) )
diff --git a/resip/stack/CMakeLists.txt b/resip/stack/CMakeLists.txt
index d7c2f4c46..b0eeabedb 100644
--- a/resip/stack/CMakeLists.txt
+++ b/resip/stack/CMakeLists.txt
@@ -410,7 +410,7 @@ version_libname(resip)
 set_target_properties(resip PROPERTIES FOLDER resip)
 
 install(TARGETS resip DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/stack ${INCLUDES})
+#install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/resip/stack ${INCLUDES})
 
 if(BUILD_TESTING)
     add_subdirectory(test)
diff --git a/resip/stack/SdpContents.cxx b/resip/stack/SdpContents.cxx
index 37f75d8a0..685739970 100644
--- a/resip/stack/SdpContents.cxx
+++ b/resip/stack/SdpContents.cxx
@@ -1526,7 +1526,8 @@ SdpContents::Session::Medium::Medium()
    : mSession(0),
      mPort(0),
      mMulticast(1),
-     mRtpMapDone(false)
+     mRtpMapDone(false),
+     mSSRC(0)
 {}
 
 SdpContents::Session::Medium::Medium(const Medium& rhs)
@@ -1544,7 +1545,8 @@ SdpContents::Session::Medium::Medium(const Medium& rhs)
      mEncryption(rhs.mEncryption),
      mAttributeHelper(rhs.mAttributeHelper),
      mRtpMapDone(rhs.mRtpMapDone),
-     mRtpMap(rhs.mRtpMap)
+     mRtpMap(rhs.mRtpMap),
+     mSSRC(rhs.mSSRC)
 {
 }
 
@@ -1706,6 +1708,14 @@ SdpContents::Session::Medium::parse(ParseBuffer& pb)
    }
 
    mAttributeHelper.parse(pb);
+
+   if (!pb.eof() && *pb.position() == 'y')
+   {
+      pb.skipChar('y');
+      pb.skipChar(Symbols::EQUALS[0]);
+      mSSRC = pb.uInt32();
+      skipEol(pb);
+   }
 }
 
 EncodeStream&
@@ -1788,6 +1798,10 @@ SdpContents::Session::Medium::encode(EncodeStream& s) const
 
    mAttributeHelper.encode(s);
 
+   char y[16] = {0};
+   snprintf(y, sizeof(y), "%010u", mSSRC);
+   s << "y=" << y << Symbols::CRLF;
+
    return s;
 }
 
diff --git a/resip/stack/SdpContents.hxx b/resip/stack/SdpContents.hxx
index acf793f5a..3cd219b94 100644
--- a/resip/stack/SdpContents.hxx
+++ b/resip/stack/SdpContents.hxx
@@ -843,6 +843,9 @@ class SdpContents : public Contents
                   const Direction& getDirection() const;
                   const Direction& getDirection(const Direction& sessionDefault) const;
 
+                  uint32_t ssrc() const {return mSSRC;}
+                  uint32_t& ssrc() { return mSSRC;}
+
                private:
                   void setSession(Session* session);
                   Session* mSession;
@@ -864,6 +867,8 @@ class SdpContents : public Contents
                   typedef HashMap<int, Codec> RtpMap;
                   RtpMap mRtpMap;
 
+                  uint32_t mSSRC;
+
                   friend class Session;
             };
 
diff --git a/rutil/CMakeLists.txt b/rutil/CMakeLists.txt
index 7ed566263..da74fd473 100644
--- a/rutil/CMakeLists.txt
+++ b/rutil/CMakeLists.txt
@@ -262,7 +262,7 @@ set_target_properties(rutil PROPERTIES FOLDER rutil)
 version_libname(rutil)
 
 install(TARGETS rutil DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/rutil ${INCLUDES})
+#install_and_preserve_hierarchy(${CMAKE_INSTALL_INCLUDEDIR}/rutil ${INCLUDES})
 
 if(NOT WITH_C_ARES)
    add_subdirectory(dns/ares)
diff --git a/rutil/Log.cxx b/rutil/Log.cxx
old mode 100644
new mode 100755
index efd4a89dd..490141ba7
--- a/rutil/Log.cxx
+++ b/rutil/Log.cxx
@@ -309,38 +309,41 @@ Log::initialize(Type type, Level level, const Data& appName,
       }
 #endif
 
-      char buffer[1024];  
-      buffer[1023] = '\0';
-      if(gethostname(buffer, sizeof(buffer)) == -1)
+      if (messageStructure == JSON_CEE)
       {
-         mHostname = "?";
-      }
-      else
-      {
-         mHostname = buffer;
-      }
-
-      // Note: for Windows users, you must call initNetwork to initialize WinSock before calling 
-      //       Log::initialize in order for getaddrinfo to be successful
-      {
-         struct addrinfo hints;
-         struct addrinfo* info = nullptr;
-         int gai_result;
-
-         memset (&hints, 0, sizeof (hints));
-         hints.ai_family = AF_UNSPEC;    /*either IPV4 or IPV6 */
-         hints.ai_socktype = SOCK_STREAM;
-         hints.ai_flags = AI_CANONNAME;
-
-         if ((gai_result = getaddrinfo (buffer, 0, &hints, &info)) != 0) {
-            mFqdn = mHostname;
-         } else if (info == NULL) {
-            mFqdn = mHostname;
-         } else {
-            mFqdn = info->ai_canonname;
+         char buffer[1024];  
+         buffer[1023] = '\0';
+         if(gethostname(buffer, sizeof(buffer)) == -1)
+         {
+            mHostname = "?";
+         }
+         else
+         {
+            mHostname = buffer;
          }
 
-         freeaddrinfo (info);
+         // Note: for Windows users, you must call initNetwork to initialize WinSock before calling 
+         //       Log::initialize in order for getaddrinfo to be successful
+         {
+            struct addrinfo hints;
+            struct addrinfo* info = nullptr;
+            int gai_result;
+
+            memset (&hints, 0, sizeof (hints));
+            hints.ai_family = AF_UNSPEC;    /*either IPV4 or IPV6 */
+            hints.ai_socktype = SOCK_STREAM;
+            hints.ai_flags = AI_CANONNAME;
+
+            if ((gai_result = getaddrinfo (buffer, 0, &hints, &info)) != 0) {
+               mFqdn = mHostname;
+            } else if (info == NULL) {
+               mFqdn = mHostname;
+            } else {
+               mFqdn = info->ai_canonname;
+            }
+
+            freeaddrinfo (info);
+         }
       }
 
    }
diff --git a/rutil/dns/ares/CMakeLists.txt b/rutil/dns/ares/CMakeLists.txt
index 021b8cf28..2d1a54b74 100644
--- a/rutil/dns/ares/CMakeLists.txt
+++ b/rutil/dns/ares/CMakeLists.txt
@@ -57,26 +57,26 @@ version_libname(resipares)
 set_target_properties(resipares PROPERTIES FOLDER rutil/ares)
 
 install(TARGETS resipares DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install(FILES ${INCLUDES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rutil/dns/ares)
+#install(FILES ${INCLUDES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rutil/dns/ares)
 
-add_executable(ahost EXCLUDE_FROM_ALL ahost.c)
-add_executable(adig EXCLUDE_FROM_ALL adig.c)
+#add_executable(ahost EXCLUDE_FROM_ALL ahost.c)
+#add_executable(adig EXCLUDE_FROM_ALL adig.c)
 
-target_include_directories(ahost PRIVATE ${PROJECT_SOURCE_DIR})
-target_include_directories(adig PRIVATE ${PROJECT_SOURCE_DIR})
+#target_include_directories(ahost PRIVATE ${PROJECT_SOURCE_DIR})
+#target_include_directories(adig PRIVATE ${PROJECT_SOURCE_DIR})
 
-target_link_libraries(ahost resipares)
-target_link_libraries(adig resipares)
+#target_link_libraries(ahost resipares)
+#target_link_libraries(adig resipares)
 
-set_target_properties(ahost PROPERTIES FOLDER rutil/ares/tools)
-set_target_properties(adig PROPERTIES FOLDER rutil/ares/tools)
+#set_target_properties(ahost PROPERTIES FOLDER rutil/ares/tools)
+#set_target_properties(adig PROPERTIES FOLDER rutil/ares/tools)
 
 # fuzzing targets
 
-add_fuzzing_executable(aresfuzz ares-test-fuzz.c)
-set_target_properties(aresfuzz PROPERTIES FOLDER rutil/ares/tools)
-target_link_libraries(aresfuzz PRIVATE resipares)
+#add_fuzzing_executable(aresfuzz ares-test-fuzz.c)
+#set_target_properties(aresfuzz PROPERTIES FOLDER rutil/ares/tools)
+#target_link_libraries(aresfuzz PRIVATE resipares)
 
-add_fuzzing_executable(aresfuzzname ares-test-fuzz-name.c)
-set_target_properties(aresfuzzname PROPERTIES FOLDER rutil/ares/tools)
-target_link_libraries(aresfuzzname PRIVATE resipares)
+#add_fuzzing_executable(aresfuzzname ares-test-fuzz-name.c)
+#set_target_properties(aresfuzzname PROPERTIES FOLDER rutil/ares/tools)
+#target_link_libraries(aresfuzzname PRIVATE resipares)
